'''
Excercise 1
Create a program that asks the user to enter their name and their age.
Print out a message addressed to them that tells them the year that they will turn 100 years old.
'''

def exercise1():
    from datetime import datetime # we will use this to get the year
    currentYear = datetime.now().year # Gets the current year so program does not have to be updated each year using datetime

    name = input("Enter Name: ").title() # putting input in title form so first letter will be capitalized
    age = input(" Enter Age: ")
    turning_100 = ((currentYear - int(age) + 100)) # Current Year - Age = Year of Birth -- Add 100 for 100 years after the year of birth
    print("Hello, " + name + "! You will turn 100 years old in the year " + str(turning_100) + "!") #output

'''
Exercise 2
Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user.
'''

def exercise2():
    try:

        num = int(input("Enter a positive number: ")) # Convert numerical input from a string to an integer

        if num % 2 == 0:
            print("The number " + str(num) + " is even!")
        else:
            print("The number " + str(num) +  " is odd!")

    except ValueError: # Will be called if user inputs a non-integer value
        print("Please enter an integer.")

'''
Exercise 3
Write a program that prints out all the elements of the list that are less than 5.
'''

def exercise3():
    a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

    for num in a:
        if num < 5:
            print(num)

    # [output] for [item] in [list] if [filter] LIST COMPREHENSION

    print([num for num in a if num < 5]) # Output: [1, 1, 2, 3]



'''
Exercise 4
Create a program that asks the user for a number and then prints out a list of all the divisors of that number. 
(If you don’t know what a divisor is, it is a number that divides evenly into another number. 
For example, 13 is a divisor of 26 because 26 / 13 has no remainder.)

'''

def exercise4():

    num = int(input("Enter a number: ")) # Input: 21
    print([div for div in range(1, num + 1) if num % div == 0]) # Output: [1, 3, 7, 21]


'''
Exercise 5
Write a program that returns a list that contains only the elements that are common between the lists (without duplicates).
 Make sure your program works on two lists of different sizes.
'''

def exercise5():
    a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
    b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

    print([item for item in a and b if item in a and b]) # Output: [1, 2, 3, 5, 8, 13]

'''
Exercise 6
Ask the user for a string and print out whether this string is a palindrome or not. 
(A palindrome is a string that reads the same forwards and backwards.)
'''
def exercise6():
    string = input("Enter a word or message: ")
    string_reverse = string[::-1]
    print(string_reverse)
    if string == string_reverse:
        print(string + " is a palindrome.")
    else:
        print(string + " is not a palindrome.")

    # test = "Chris Brown" input: Chris Brown
    # print(test[0:7:]) output: Chris B

'''
Exercise 7
Let’s say I give you a list saved in a variable: a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100].
Write one line of Python that takes this list a and makes a new list that has only the even elements of this list in it.
'''

def exercise7():
    a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    print([even for even in a if even % 2 == 0])

    print("Even") ; print( "Numbers!") #Did not know until today you could use semi-colons in Python :0 8/7/2019
 
 '''
Exercise 11
Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.).
You can (and should!) use your answer to Exercise 4 to help you. Take this opportunity to practice using functions, described below.
'''

def exercise11():
    import sympy

    number = int(input("Enter a number: "))
    prime = sympy.isprime(number)

    if prime: #if True, print 'Prime'
        print("Prime")
    else:
        print("Not Prime")

def exercise11_1(x):
    
    if x > 1:
        for i in range(2, x):
            print(i)
            if x % i == 0: #prime number is only divisible by 1 and itself, when something is divisible by a number greater than one, it's remainder is 0 

                print("Not Prime")
                return False
        print("Prime")
        return True

    print("Not prime")
    return False

exercise11_1(10)

'''
Exercise12
Write a program that takes a list of numbers (for example, a = [5, 10, 15, 20, 25]) and makes a new list of only the first and last elements of the given list.
For practice, write this code inside a function.
'''


def exercise12():
    a = [5, 10, 15, 20, 25, 8]
    print([item for item in a if a[0] == item or item == a[len(a)-1]]) #Output: [5, 8]


def exercise13():

    num_in_sequence = int(input("How many Fibonnaci numbers do you want to see?: "))

    a = [1,1]
    for n in range(2,num_in_sequence):
        fib = int(a[n-2]) + int(a[n-1])
        a.append(fib)
        print(a)

'''
Exercise 14
Write a program (function!) that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates.
'''
def exercise14():
    list1 =  [3, 5, 11, 12, 8, 9, 8, 10, 3]
    print(set([item for item in list1])) #output: {3, 5, 8, 9, 10, 11, 12}

'''
Notes on sets:
Sets are not ordered. This means that there is no “first element” or “last element.” There are just “elements”.
You cannot ask a set for it’s “next element”.
There are no repeat elements in sets.
You can convert between sets and lists very easily.
 names = set()
  names.add("Michele")
  names.add("Robin")
  names.add("Michele")
  print(names)
'''

'''
Exercise 15
Write a program (using functions!) that asks the user for a long string containing multiple words.
Print back to the user the same string, except with the words in backwards order.
'''
def exercise15():
    string = "This is a string of words"
    reverse = string[::-1]
    print(reverse)
    
    # Online Solutions
    # def reverse_v1(x):
    #     y = x.split()
    #     result = []
    #     for word in y:
    #         result.insert(0, word)
    #     return " ".join(result)
    # 
    # # method 2
    # def reverse_v2(x):
    #     y = x.split()
    #     return " ".join(y[::-1])
    # 
    # # method 3
    # def reverse_v3(x):
    #     y = x.split()
    #     return " ".join(reversed(y))
    # 
    # # method 4
    # def reverse_v4(x):
    #     y = x.split()
    #     y.reverse()
    #     return " ".join(y)


'''
Exercise 16
Write a password generator in Python. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols.
The passwords should be random, generating a new password every time the user asks for a new password. Include your code in a main method.
'''

#Solution from GitHub
import random

s = "abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?"
word = ["Pass", "Word", "123", "567", "890"]
passlen = 8
p = "".join(random.sample(s, passlen))
print(p)
werd = ''.join(random.sample(word, 3))
print(werd)

'''
Syntax : random.sample(sequence, k)

Parameters:
sequence: Can be a list, tuple, string, or set.
k: An Integer value, it specify the length of a sample.

Returns: k length new list of elements chosen from the sequence.

'''

'''
Exercise 17
Use the BeautifulSoup and requests Python packages to print out a list of all the article titles on the New York Times homepage.
'''
import requests
from bs4 import BeautifulSoup

# html = (requests.get("http://nytimes.com").text)
# soup = BeautifulSoup(html, "html.parser")
# print(soup)
# title = soup.find('title').string
# print(title)

from bs4 import BeautifulSoup
import requests

page = requests.get('https://www.nytimes.com/') # Program requests connection to the URL
cont = page.content # Content of page saved in variable cont

soup = BeautifulSoup(cont, "html.parser") # Beautiful Soup used to format HTML correctly in Python terminal
print(soup)
list1 = soup.find_all(class_="esl82me1") # Finds all the items in the HTML that has the specific class
# print(list1) # [<div class="css-1064d4e esl82me1"><h2 class="css-km70tz esl82me0">Listen to ‘The Daily’</h2></div>...

for i in list1: # runs through items in the list1 variable
    print(i.text)
    print(len(list1))


# import requests
# from bs4 import BeautifulSoup
# url = 'http://github.com'
# r = requests.get(url)
# r_html = r.text
# soup = BeautifulSoup(r_html)
# print(soup)
